---
apiVersion: batch/v1
kind: Job
metadata:
  name: etcd-secret-writer
  namespace: obs2
spec:
  template:
    spec:
      automountServiceAccountToken: true
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-role.kubernetes.io/control-plane
                operator: Exists
      containers:
      - image: docker.io/bitnami/kubectl:1.32.0-debian-12-r0
        command: ["/bin/sh"]
        args: 
          - "-c"
          - |
              set -e
              echo "Checking for etcd certificates..."
              ls -la /system/secrets/etcd/ || echo "Certificate directory not found"
              
              if [ -f /system/secrets/etcd/ca.crt ] && [ -f /system/secrets/etcd/server.crt ] && [ -f /system/secrets/etcd/server.key ]; then
                echo "Creating etcd-secrets from certificates..."
                kubectl create secret generic etcd-secrets --save-config \
                  --dry-run=client \
                  --from-file=/system/secrets/etcd/ca.crt \
                  --from-file=/system/secrets/etcd/server.crt \
                  --from-file=/system/secrets/etcd/server.key \
                  -o yaml | kubectl apply -f -
                echo "Secret created successfully"
              else
                echo "ERROR: Required certificate files not found in /system/secrets/etcd/"
                echo "Available files:"
                find /system/secrets/ -name "*.crt" -o -name "*.key" 2>/dev/null || echo "No certificate files found"
                exit 1
              fi 
        imagePullPolicy: IfNotPresent
        name: kubectl
        volumeMounts:
        - mountPath: /system/secrets/etcd
          name: k8setcdcert
        - mountPath: /tmp
          name: tmp
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 60 # this is matches the etcd user in the cluster
          seLinuxOptions: {}
          seccompProfile:
            type: RuntimeDefault
      volumes:
      - name: tmp
        emptyDir: {}
      - hostPath:
          path: /system/secrets/etcd
        name: k8setcdcert
      restartPolicy: Never
      serviceAccount: secrets-writer
      serviceAccountName: secrets-writer
  backoffLimit: 3