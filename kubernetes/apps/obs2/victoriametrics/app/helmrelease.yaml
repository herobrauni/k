---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/source.toolkit.fluxcd.io/ocirepository_v1beta2.json
apiVersion: source.toolkit.fluxcd.io/v1beta2
kind: OCIRepository
metadata:
  name: victoria-metrics-operator
spec:
  interval: 5m
  layerSelector:
    mediaType: application/vnd.cncf.helm.chart.content.v1.tar+gzip
    operation: copy
  ref:
    tag: 0.35.1
  url: oci://ghcr.io/victoriametrics/helm-charts/victoria-metrics-k8s-stack
---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: victoria-metrics-k8s-stack
spec:
  driftDetection:
    mode: enabled
  interval: 1h
  chartRef:
    kind: OCIRepository
    name: victoria-metrics-operator
  install:
    remediation:
      retries: -1
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  values:
    victoria-metrics-operator:
      crds:
        enabled: true
        plain: false
    vmsingle:
      # we're using cluster, so this is false
      enabled: false
    vmcluster:
      enabled: true
      spec:
        retentionPeriod: "1"
        replicationFactor: 2
        vmstorage:
          replicaCount: 2
          storageDataPath: /vm-data
          extraArgs:
            dedup.minScrapeInterval: 10s
          storage:
            volumeClaimTemplate:
              spec:
                # the PV's need to be pre-created before we apply this
                storageClassName: ceph-block
                accessModes:
                  - ReadWriteOnce
                resources:
                  requests:
                    storage: 25Gi
        vmselect:
          port: "8481"
          replicaCount: 2
          cacheMountPath: /select-cache
          extraArgs:
            dedup.minScrapeInterval: 10s
          storage:
            volumeClaimTemplate:
              spec:
                storageClassName: ceph-block
                accessModes:
                  - ReadWriteOnce
                resources:
                  requests:
                    storage: 2Gi
        vminsert:
          port: "8480"
          replicaCount: 2
        ingress:
          enabled: false
          select:
            enabled: false
          insert:
            enabled: false
    alertmanager:
      # we are leaving this disabled. More on alerting in another post.
      enabled: false
    vmalert:
      # disabled as above for now
      enabled: false
    vmauth:
      enabled: false
    vmagent:
      enabled: true
      spec:
        scrapeInterval: 10s
        replicaCount: 2
      ingress:
        enabled: true
        ingressClassName: traefik
        annotations:
          external-dns.alpha.kubernetes.io/target: "480p.com"
          cert-manager.io/cluster-issuer: letsencrypt-production
          traefik.ingress.kubernetes.io/router.middlewares: network-authentik@kubernetescrd
        hosts:
          - "vmagent.480p.com"
        paths:
          - /
        pathType: Prefix
        tls:
          - secretName: "vmagent-tls"
            hosts:
              - "vmagent.480p.com"

    # disabled for now; will enable later
    grafana:
      enabled: false

    prometheus-node-exporter:
      enabled: true

    kube-state-metrics:
      enabled: true
      replicas: 1 # see note about this below

    kubelet:
      enabled: true

    # Component scraping the kube api server
    kubeApiServer:
      enabled: true
      vmScrape:
        spec:
          endpoints:
            - bearerTokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
              port: https
              scheme: https
              tlsConfig:
                caFile: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                serverName: kubernetes # this is necessary otherwise the scrape will fail with a hostname/tls error
          jobLabel: component
          namespaceSelector:
            matchNames:
              - default
          selector:
            matchLabels:
              component: apiserver
              provider: kubernetes

    kubeControllerManager: # this requires additional configuration; will be handled in the next post
      enabled: false
      service:
        enabled: false

    kubeDns:
      enabled: false
      service:
        enabled: false

    coreDns:
      enabled: true
      service:
        enabled: true

    kubeEtcd: # this requires additional configuration; will be handled in the next post
      enabled: false
      service:
        enabled: false

    kubeScheduler: # this requires additional configuration; will be handled in the next post
      enabled: false
      service:
        enabled: false

    kubeProxy:
      # my cluster uses Cilium in kube-proxy replacement mode, so I don't need this
      enabled: false
      service:
        enabled: false

    prometheus-operator-crds:
      enabled: false